// src/utils/shipmentPdf.js
const PDFDocument = require('pdfkit');

function textWrap(doc, x, y, text, options = {}) {
  doc.text(text, x, y, { width: options.width || 300 });
}

async function renderShipmentPdfBuffer(shipment, { imageBuffer = null, qrBuffer = null } = {}) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: 'A4', margin: 36 });
      const bufs = [];
      doc.on('data', (d) => bufs.push(d));
      doc.on('end', () => resolve(Buffer.concat(bufs)));

      // Header
      doc.fontSize(18).font('Helvetica-Bold').text('Shipment Waybill', { align: 'center' });
      doc.moveDown(0.5);
      doc.fontSize(12).font('Helvetica').text(`Tracking: ${shipment.trackingCode}`, { align: 'center' });
      doc.moveDown(1);

      // Top area: left image, right QR & basic meta
      const pageWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
      const leftW = 220;
      const rightW = pageWidth - leftW - 10;

      // draw image box
      if (imageBuffer) {
        try {
          doc.image(imageBuffer, doc.x, doc.y, { width: leftW, height: 140, fit: [leftW, 140], align: 'left' });
        } catch (e) {}
      } else {
        // placeholder box
        doc.rect(doc.x, doc.y, leftW, 140).strokeColor('#e2e8f0').stroke();
        doc.fontSize(10).fillColor('#94a3b8').text('No image', doc.x + 8, doc.y + 8);
      }

      // Right column: QR + details
      const startY = doc.y;
      const rightX = doc.x + leftW + 10;
      if (qrBuffer) {
        try {
          doc.image(qrBuffer, rightX + rightW - 110, startY, { width: 100, height: 100 });
        } catch (e) {}
      }
      doc.fontSize(10).fillColor('#0f172a');
      doc.text(`Shipment Date: ${shipment.shipmentDate ? new Date(shipment.shipmentDate).toLocaleString() : '-'}`, rightX, startY);
      doc.text(`Service: ${shipment.serviceType || '-'}`, { width: rightW, continued: false });
      doc.moveDown(0.5);

      doc.font('Helvetica-Bold').text('Consignor:', rightX);
      doc.font('Helvetica').text(`${shipment.consignor?.fullName || '-'}\n${shipment.consignor?.address || '-'}`, { width: rightW });
      doc.moveDown(0.3);
      doc.font('Helvetica-Bold').text('Consignee:', rightX);
      doc.font('Helvetica').text(`${shipment.consignee?.fullName || '-'}\n${shipment.consignee?.address || '-'}`, { width: rightW });

      doc.moveDown(1.2);

      // Divider
      doc.moveTo(doc.x, doc.y).lineTo(doc.x + pageWidth, doc.y).strokeColor('#e6e7e8').stroke();
      doc.moveDown(0.5);

      // Content / summary area
      doc.font('Helvetica-Bold').fontSize(11).text('Shipment Summary');
      doc.moveDown(0.2);
      doc.font('Helvetica').fontSize(10);
      doc.text(`Content: ${shipment.contentDetails || '-'}`);
      doc.text(`Quantity: ${shipment.quantity || '-'}`);
      doc.text(`Receiver: ${shipment.receiver || '-'}`);
      doc.text(`Current location: ${shipment.currentLocationText || '-'}`);
      doc.text(`Destination: ${shipment.destination?.address || '-'}`);

      doc.moveDown(0.6);
      doc.font('Helvetica-Bold').text('Recent locations:');
      doc.font('Helvetica').fontSize(10);
      const locs = (shipment.locations || []).slice(0, 8);
      for (const l of locs) {
        const dt = l.recordedAt ? new Date(l.recordedAt).toLocaleString() : '-';
        const coordStr = l.coords?.coordinates ? ` (${l.coords.coordinates[1].toFixed(4)}, ${l.coords.coordinates[0].toFixed(4)})` : '';
        doc.text(`${dt} — ${l.note || '-'}${coordStr}`);
      }

      doc.moveDown(1);
      doc.fontSize(9).fillColor('#6b7280').text('Generated by FlightApp · Shipment System', { align: 'center' });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

module.exports = { renderShipmentPdfBuffer };
